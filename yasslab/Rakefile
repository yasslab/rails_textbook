top_level = self

using(Module.new do
  refine(top_level.singleton_class) do
    def contents
      %w[01_preface 02_smallest_app 03_crud 04_new_create 05_model 06_gem 07_picture_upload 08_postface]
    end

    def create_toc
      toc_path = "_review/webroot/frontmatter_refinement.html"
      File.open(toc_path, 'w+') { |f| f.write(generate_toc) }
    end

    def generate_toc
      body = "<h1 class='contents'>目次</h1><div id='table_of_contents'><ul>"
      contents.each.with_index(1) do |file_name, sec_number|
        file = File.open("_review/webroot/#{file_name}.html")
        html = Nokogiri::HTML(file, nil, 'utf-8')
        file_name.gsub!('-','_')
        toc_name = html.title
        body << "<li class='chapter'><a href='/textbook/#{file_name}' class='heading hyperref'><span class='number'>第#{sec_number}章</span>#{toc_name}</a></li>"
      end
      body << "</ul></div>"
      body
    end
  end
end)

desc 'refine html'
task :refine_html do
  require 'nokogiri'
  require 'pry'

  puts "refinement process start"

  contents.each.with_index(1) do |file_name, sec_number|
    file = File.open("_review/webroot/#{file_name}.html")
    html = Nokogiri::HTML(file, nil, 'utf-8')


    # Remove Navigation and toc
    html.search('.book-navi').remove
    html.search('.side-content').remove
    html.search('link[rel=stylesheet]').remove

    # Change title to simple text
    html.search('h1 a').remove
    sec_number = html.search('h1 span').text.delete('　')
    html.at_css('h1 span').content = sec_number

    # Change h1 > span class name
    html.search('h1 span').each do |span|
      span['class'] = 'number'
    end

    html.css('img').each do |i|
      src = i.attr('src').split('_review/')[1]
      i.attributes['src'].value = "#{ENV['RAILS_TEXT_S3_PATH']}/#{src}"
    end


    html.css('a').each do |a|
      next if a.text.empty?
      a['target'] = '_blank'
      a['rel'] = 'noopener'
    end

    file_name = file_name.slice(3..) # Change to support RailsTutorialJP naming style

    refine_path = "_review/webroot/#{file_name}_refinement.html"
    File.open(refine_path, 'w+') { |f| f.write(html) }

    puts "refinement file: #{file_name}"
  end
  create_toc
  puts "refinement process end"
end
